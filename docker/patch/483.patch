From 0db5a7ded2944dee36c8f0f503a3a8dd5d18b484 Mon Sep 17 00:00:00 2001
From: plowsec <united.marshmallow@gmail.com>
Date: Sun, 3 Dec 2017 13:06:24 +0100
Subject: [PATCH] Fix for issue #482

---
 volatility/plugins/malware/apihooks.py | 47 +++++++++++++++++++++-----
 1 file changed, 38 insertions(+), 9 deletions(-)

diff --git a/volatility/plugins/malware/apihooks.py b/volatility/plugins/malware/apihooks.py
index 75154750..bae52998 100644
--- a/volatility/plugins/malware/apihooks.py
+++ b/volatility/plugins/malware/apihooks.py
@@ -736,7 +736,7 @@ def check_inline(va, addr_space, mem_start, mem_end, mode = distorm3.Decode32Bit
         push_val = None
         # Save the general purpose registers
         regs = {}
-
+        
         for op in distorm3.Decompose(va, data, mode):
 
             # Quit the loop when we have three instructions or when 
@@ -838,10 +838,7 @@ def check_inline(va, addr_space, mem_start, mem_end, mode = distorm3.Decode32Bit
             n += 1
 
         # Check EIP after the function prologue 
-        if outside_module(d):
-            return True, data, d
-        else:
-            return False, data, d
+        return outside_module(d), data, d
 
     def gather_stuff(self, _addr_space, module):
         """Use the Volatility object classes to enumerate
@@ -986,12 +983,9 @@ def get_hooks(self, hook_mode, addr_space, module, module_group):
 
             (hooked, data, dest_addr) = ret
 
-            if not hooked:
-                continue
-
             if not addr_space.is_valid_address(dest_addr):
                 continue
-
+               
             function_owner = module_group.find_module(dest_addr)
             if function_owner != module:
                 # only do this for kernel hooks
@@ -1014,6 +1008,41 @@ def get_hooks(self, hook_mode, addr_space, module, module_group):
                 # Add the first redirection
                 hook.add_hop_chunk(dest_addr, addr_space.zread(dest_addr, 24))
                 yield hook
+                
+            # some malwares place their hook inside a code cave inside the module, use with -N to follow the jump   
+            elif self._config.NO_WHITELIST :
+                ret = self.check_inline(dest_addr, addr_space,
+                module.DllBase, module.DllBase + module.SizeOfImage, 
+                mode = decode_bits)
+
+                if ret == None:
+                    continue
+
+                (hooked, data, dest_addr2) = ret
+
+                if not hooked:
+                    continue
+
+                if not addr_space.is_valid_address(dest_addr2):
+                    continue
+                
+                function_owner = module_group.find_module(dest_addr2)
+                if function_owner != module:
+                    print "here is a hook that wasn't detected'"
+                    hook = Hook(hook_type = HOOKTYPE_INLINE,
+                            hook_mode = hook_mode,
+                            function_name = n or '',
+                            function_address = function_address,
+                            hook_address = dest_addr2,
+                            hook_module = function_owner,
+                            victim_module = module,
+                            decode_bits = decode_bits,
+                            )
+                    # Add the function prologue 
+                    hook.add_hop_chunk(function_address, data)
+                    # Add the first redirection
+                    hook.add_hop_chunk(dest_addr2, addr_space.zread(dest_addr2, 24))
+                    yield hook
 
     def calculate(self):
 
